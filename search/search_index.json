{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Home"},{"location":"contributing/","text":"Support \u00b6 CronOps DevOpsTip \u00b6 Please create a Github Issue . To get in touch please check CronOps website Contributing to CronOps DevOpsTips \u00b6 This document explains how to get start contributing to CronOps DevOpsTips . It includes how to build, test, and release new versions. Quick Start \u00b6 Getting the code \u00b6 The code must be checked out from this same github.com repo inside the CronOps Github Organization . git clone git@github.com:cronops-io/devopstips.cronops.io.git cd devopstips.cronops.io Initial developer environment build \u00b6 Follow README.md instructions Deploying \u00b6 Automated post PR approved and merged from your WIP branch. Testing \u00b6 Build must pass OK + proper manual content review Releasing \u00b6 CircleCi PR auto-release job \u00b6 https://circleci.com/gh/cronops-io/devopstips.cronops.io NOTE: Will only run after merged PR.","title":"Contributing"},{"location":"contributing/#support","text":"","title":"Support"},{"location":"contributing/#cronops-devopstip","text":"Please create a Github Issue . To get in touch please check CronOps website","title":"CronOps DevOpsTip"},{"location":"contributing/#contributing-to-cronops-devopstips","text":"This document explains how to get start contributing to CronOps DevOpsTips . It includes how to build, test, and release new versions.","title":"Contributing to CronOps DevOpsTips"},{"location":"contributing/#quick-start","text":"","title":"Quick Start"},{"location":"contributing/#getting-the-code","text":"The code must be checked out from this same github.com repo inside the CronOps Github Organization . git clone git@github.com:cronops-io/devopstips.cronops.io.git cd devopstips.cronops.io","title":"Getting the code"},{"location":"contributing/#initial-developer-environment-build","text":"Follow README.md instructions","title":"Initial developer environment build"},{"location":"contributing/#deploying","text":"Automated post PR approved and merged from your WIP branch.","title":"Deploying"},{"location":"contributing/#testing","text":"Build must pass OK + proper manual content review","title":"Testing"},{"location":"contributing/#releasing","text":"","title":"Releasing"},{"location":"contributing/#circleci-pr-auto-release-job","text":"https://circleci.com/gh/cronops-io/devopstips.cronops.io NOTE: Will only run after merged PR.","title":"CircleCi PR auto-release job"},{"location":"license/","text":"License \u00b6 MIT License Copyright \u00a9 2020 CronOps Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"license/#license","text":"MIT License Copyright \u00a9 2020 CronOps Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"welcome/","text":"Welcome \u00b6 Overview CronOps DevOpsTips show Product Management, Development, QA, IT Operations, and Information Security best practices and how they all integrate to contribute in both building and scaling high-performance technology organizations. The result of following our tips and shifting to a DevOps mindset and culture should be a world-class software delivery performance through optimized collaboration, communication, reliability, stability, scalability and security at ever lower cost and effort. Getting Started \u00b6 DevOpsTips Categories Discover our tips classified by DevOps Improvement capabilities categories directly associated to software delivery performance. See Culture See Product and Process See Lean Management See Architecture See Development & CI/CD See Monitoring & SRE See Security Color Settings \u00b6 The color scheme will be set based on user preference, which makes use of the prefers-color-scheme media query. How to setup Dark mode | Dark theme Google Chrome | Browse in Dark mode or Dark theme How to enable dark mode on your phone, laptop, and more Try it yourself \u00b6 Click on below presented buttons to change the color scheme default-theme | day-mode dark-theme | night-mode var buttons = document.querySelectorAll(\"button[data-md-color-scheme]\") buttons.forEach(function(button) { button.addEventListener(\"click\", function() { var attr = this.getAttribute(\"data-md-color-scheme\") document.body.setAttribute(\"data-md-color-scheme\", attr) var name = document.querySelector(\"#__code_0 code span:nth-child(7)\") name.textContent = attr }) })","title":"Welcome"},{"location":"welcome/#welcome","text":"Overview CronOps DevOpsTips show Product Management, Development, QA, IT Operations, and Information Security best practices and how they all integrate to contribute in both building and scaling high-performance technology organizations. The result of following our tips and shifting to a DevOps mindset and culture should be a world-class software delivery performance through optimized collaboration, communication, reliability, stability, scalability and security at ever lower cost and effort.","title":"Welcome"},{"location":"welcome/#getting-started","text":"DevOpsTips Categories Discover our tips classified by DevOps Improvement capabilities categories directly associated to software delivery performance. See Culture See Product and Process See Lean Management See Architecture See Development & CI/CD See Monitoring & SRE See Security","title":"Getting Started"},{"location":"welcome/#color-settings","text":"The color scheme will be set based on user preference, which makes use of the prefers-color-scheme media query. How to setup Dark mode | Dark theme Google Chrome | Browse in Dark mode or Dark theme How to enable dark mode on your phone, laptop, and more","title":"Color Settings"},{"location":"welcome/#try-it-yourself","text":"Click on below presented buttons to change the color scheme default-theme | day-mode dark-theme | night-mode var buttons = document.querySelectorAll(\"button[data-md-color-scheme]\") buttons.forEach(function(button) { button.addEventListener(\"click\", function() { var attr = this.getAttribute(\"data-md-color-scheme\") document.body.setAttribute(\"data-md-color-scheme\", attr) var name = document.querySelector(\"#__code_0 code span:nth-child(7)\") name.textContent = attr }) })","title":"Try it yourself"},{"location":"architecture/","text":"Overview \u00b6 TODO","title":"Overview"},{"location":"architecture/#overview","text":"TODO","title":"Overview"},{"location":"continuous-delivery/","text":"Overview \u00b6 TODO","title":"Overview"},{"location":"continuous-delivery/#overview","text":"TODO","title":"Overview"},{"location":"culture/","text":"Overview \u00b6 1st and foremost we'll need to understand that DevOps is a cultural shift , It\u2019s not a matter of simply adopting agile project planning or automated testing, continuos integration and continuous delivery, although those practices are certainly important and part of the overall DevOps picture. DevOps culture is more about a shared understanding between Developers, QA, Product Management, InfoSec and Operations, and sharing responsibility for the software they build and deliver. That means continuously improving and maturing communication, transparency, and collaboration across all IT aforementioned teams and \"the business\". The Challenge Like any big and deep change, building a DevOps culture can be challenging and even scary for some people. We get this point. But we\u2019ve been learning through our own experience (and all the projects we've actively participated) that possibly the two main factors (among others that we'll develop in DevOpsTips ) are: Clarity around both teams and business expectations An environment of psychological safety Without them, teams tend to fall in \"The Core, Chronic Conflict\" \"The Core, Chronic Conflict\" , as detailed in the DevOps Handbook In almost every IT organization, there is an inherent conflict between Development and IT Operations which creates a downward spiral, resulting in ever-slower time to market for new products and features, reduced quality, increased outages, and, worst of all, an ever-increasing amount of technical debt. making mistakes \u2013 and, worse, not learn from them. Outcome Without considering the factors mentioned above, teams tend repeat these mistakes. And, worse, not learn from them. We hope that following CronOps DevOpsTips should make your team\u2019s DevOps journey a lot easier. Getting Started \u00b6 DevOpsTips Culture Category Read More \u00b6 Recommended reading Atlassian | Building a DevOps culture DORA's State of DevOps research program Google State of DevOps Report 2019 DORA DevOps Quick Check","title":"Overview"},{"location":"culture/#overview","text":"1st and foremost we'll need to understand that DevOps is a cultural shift , It\u2019s not a matter of simply adopting agile project planning or automated testing, continuos integration and continuous delivery, although those practices are certainly important and part of the overall DevOps picture. DevOps culture is more about a shared understanding between Developers, QA, Product Management, InfoSec and Operations, and sharing responsibility for the software they build and deliver. That means continuously improving and maturing communication, transparency, and collaboration across all IT aforementioned teams and \"the business\". The Challenge Like any big and deep change, building a DevOps culture can be challenging and even scary for some people. We get this point. But we\u2019ve been learning through our own experience (and all the projects we've actively participated) that possibly the two main factors (among others that we'll develop in DevOpsTips ) are: Clarity around both teams and business expectations An environment of psychological safety Without them, teams tend to fall in \"The Core, Chronic Conflict\" \"The Core, Chronic Conflict\" , as detailed in the DevOps Handbook In almost every IT organization, there is an inherent conflict between Development and IT Operations which creates a downward spiral, resulting in ever-slower time to market for new products and features, reduced quality, increased outages, and, worst of all, an ever-increasing amount of technical debt. making mistakes \u2013 and, worse, not learn from them. Outcome Without considering the factors mentioned above, teams tend repeat these mistakes. And, worse, not learn from them. We hope that following CronOps DevOpsTips should make your team\u2019s DevOps journey a lot easier.","title":"Overview"},{"location":"culture/#getting-started","text":"DevOpsTips Culture Category","title":"Getting Started"},{"location":"culture/#read-more","text":"Recommended reading Atlassian | Building a DevOps culture DORA's State of DevOps research program Google State of DevOps Report 2019 DORA DevOps Quick Check","title":"Read More"},{"location":"culture/tip-1-generative-culture/","text":"DevOps Culture \u00b6 Tip 1 | Support a generative culture \u00b6 From Google Cloud DevOps culture | Westrum organizational culture According to research by DevOps Research and Assessment (DORA), organizational culture that is high-trust and emphasizes information flow is predictive of software delivery performance and organizational performance in technology. The idea that a good culture that optimizes information flow is predictive of good outcomes is not a new idea; it is based on research by sociologist Dr. Ron Westrum. His research included human factors in system safety, particularly in the context of accidents in technological domains such as aviation and healthcare. In his work with these high risk, highly complex fields, Westrum noted that such a culture influences the way information flows through an organization. Westrum provides three characteristics of good information: It provides answers to the questions that the receiver needs answered. It is timely. It is presented in such a way that the receiver can use it effectively. Examples & use cases \u00b6 Practices to create a generative culture To improve information flow and trust you'll need to consider the six aspects of Westrum's model of organizational culture: High cooperation. Create cross-functional teams that include representatives from each functional area of the software delivery process (business analysts, developers, quality engineers, ops, security, and so on). This practice lets everyone share the responsibility for building, deploying, and maintaining a product. It's also important that there is good cooperation within the team. Messengers are trained. This means we want people to bring us bad news so we can make things better. Hold blameless postmortems. By removing blame, you remove fear; and by removing fear, you enable teams to surface problems and solve them more effectively. Also create and foster an environment where it is safe to take smart risks and fail, so that anyone can surface problems at any time\u2014even without the ceremony of a postmortem. Risks are shared. Along with this, encourage shared responsibilities. Quality, availability, reliability and security are everyone's job. One way to improve the quality of your services is to ensure that developers share responsibility for maintaining their code in production. The improvement in collaboration that comes from sharing responsibility inherently reduces risk: The more eyes on the software delivery process, the more you'll avoid errors in process or planning. Automation also reduces risk, and with the right tool choice, can enable collaboration. Bridging is encouraged. Break down silos. In addition to creating cross-functional teams, techniques for breaking down silos include co-locating ops with the dev team; including ops in planning throughout the software delivery lifecycle; and implementing ChatOps. Another tip is to identify someone in the organization whose work you don't understand (or whose work frustrates you, like procurement) and invite them to coffee or lunch. Informal discussions help foster better communication, and you may understand why they do what they do\u2014and you can come up with creative solutions together. Failure leads to inquiry. Again, hold blameless postmortems. The response to failure shapes the culture of an organization. Blaming individuals for failures creates a negative culture. If instead, failures lead you to ask questions about what caused the failures and how you can keep them from happening again in the future, you've improved your technical system, your processes, and your culture. Novelty is implemented. Encourage experimentation. Giving employees freedom to explore new ideas can lead to great outcomes. Some companies give engineers time each week for experimentation. Others host internal hack days or mini-conferences to share ideas and collaborate. Many new features and products began this way. When you release your employees from habitual pathways and repetitive tasks, they can generate enormous value for your organization. And remember that novelty isn't limited to new products and features. Also encourage and reward improvements in process and ideas that help foster collaboration. Extra Points! How to measure organizational culture? Source | Google Cloud DevOps culture | Westrum organizational culture Read More \u00b6 Recommended reading Accelerate Book (Appendix A: Capabilities to Drive Improvement) DORA's State of DevOps research program Google State of DevOps Report 2019 DORA DevOps Quick Check","title":"Tip 1 | Generative Culture"},{"location":"culture/tip-1-generative-culture/#devops-culture","text":"","title":"DevOps Culture"},{"location":"culture/tip-1-generative-culture/#tip-1-support-a-generative-culture","text":"From Google Cloud DevOps culture | Westrum organizational culture According to research by DevOps Research and Assessment (DORA), organizational culture that is high-trust and emphasizes information flow is predictive of software delivery performance and organizational performance in technology. The idea that a good culture that optimizes information flow is predictive of good outcomes is not a new idea; it is based on research by sociologist Dr. Ron Westrum. His research included human factors in system safety, particularly in the context of accidents in technological domains such as aviation and healthcare. In his work with these high risk, highly complex fields, Westrum noted that such a culture influences the way information flows through an organization. Westrum provides three characteristics of good information: It provides answers to the questions that the receiver needs answered. It is timely. It is presented in such a way that the receiver can use it effectively.","title":"Tip 1 | Support a generative culture"},{"location":"culture/tip-1-generative-culture/#examples-use-cases","text":"Practices to create a generative culture To improve information flow and trust you'll need to consider the six aspects of Westrum's model of organizational culture: High cooperation. Create cross-functional teams that include representatives from each functional area of the software delivery process (business analysts, developers, quality engineers, ops, security, and so on). This practice lets everyone share the responsibility for building, deploying, and maintaining a product. It's also important that there is good cooperation within the team. Messengers are trained. This means we want people to bring us bad news so we can make things better. Hold blameless postmortems. By removing blame, you remove fear; and by removing fear, you enable teams to surface problems and solve them more effectively. Also create and foster an environment where it is safe to take smart risks and fail, so that anyone can surface problems at any time\u2014even without the ceremony of a postmortem. Risks are shared. Along with this, encourage shared responsibilities. Quality, availability, reliability and security are everyone's job. One way to improve the quality of your services is to ensure that developers share responsibility for maintaining their code in production. The improvement in collaboration that comes from sharing responsibility inherently reduces risk: The more eyes on the software delivery process, the more you'll avoid errors in process or planning. Automation also reduces risk, and with the right tool choice, can enable collaboration. Bridging is encouraged. Break down silos. In addition to creating cross-functional teams, techniques for breaking down silos include co-locating ops with the dev team; including ops in planning throughout the software delivery lifecycle; and implementing ChatOps. Another tip is to identify someone in the organization whose work you don't understand (or whose work frustrates you, like procurement) and invite them to coffee or lunch. Informal discussions help foster better communication, and you may understand why they do what they do\u2014and you can come up with creative solutions together. Failure leads to inquiry. Again, hold blameless postmortems. The response to failure shapes the culture of an organization. Blaming individuals for failures creates a negative culture. If instead, failures lead you to ask questions about what caused the failures and how you can keep them from happening again in the future, you've improved your technical system, your processes, and your culture. Novelty is implemented. Encourage experimentation. Giving employees freedom to explore new ideas can lead to great outcomes. Some companies give engineers time each week for experimentation. Others host internal hack days or mini-conferences to share ideas and collaborate. Many new features and products began this way. When you release your employees from habitual pathways and repetitive tasks, they can generate enormous value for your organization. And remember that novelty isn't limited to new products and features. Also encourage and reward improvements in process and ideas that help foster collaboration. Extra Points! How to measure organizational culture? Source | Google Cloud DevOps culture | Westrum organizational culture","title":"Examples &amp; use cases"},{"location":"culture/tip-1-generative-culture/#read-more","text":"Recommended reading Accelerate Book (Appendix A: Capabilities to Drive Improvement) DORA's State of DevOps research program Google State of DevOps Report 2019 DORA DevOps Quick Check","title":"Read More"},{"location":"culture/tip-2-support-learning/","text":"DevOps Culture \u00b6 Tip 2 | Encourage and support learning \u00b6 From Accelerate Book (Appendix A: Capabilities to Drive Improvement) Is learning, in your culture, considered essential for continued progress? Is learning thought of as a cost or an investment? This is a measure of an organization\u2019s learning culture. From Google Cloud DevOps culture | Learning culture Research from the DevOps Research and Assessment (DORA) (PDF) team shows that an organizational culture that values learning contributes to software delivery performance with the following: Increased deployment frequency Reduced lead time for changes, time to restore service, and change failure rate Strong team culture The climate for learning in your organization is directly related to the extent to which your organization treats learning as strategic: Does your organization view learning as an investment necessary for growth? Is learning seen as a necessary burden, undertaken only grudgingly? Is learning completely avoided? Research done in other areas, such as accounting, has also shown that a climate for learning is predictive of performance gains. Examples & use cases \u00b6 Practices to create a generative culture You can help your organization create a climate for learning by viewing learning as the key to improvement and as an investment. Some steps you can take to directly support learning include: Create a training budget, and advocate for it internally. Emphasize how much the organization values a climate of learning by putting resources behind formal education opportunities. Ensure that your team has the resources to engage in informal learning and the space to explore ideas. Learning often happens outside of formal education. Some companies, like 3M and Google, set aside a portion of time for focused free-thinking and exploration of side projects. Make it safe to fail. If failure is punished, people won't try new things. Treat failures as opportunities to learn, and hold blameless post-mortems to work out how to improve processes and systems. Help people feel comfortable taking reasonable risks, and create a culture of innovation. Create opportunities and spaces to share information. Whether you hold weekly lightning talks or offer resources for monthly lunch-and-learns, set up a regular cadence of opportunities for employees to share their knowledge. Make resources available for continued education. For example, attending conferences is important for both exposure to new technology and case studies, as well as networking with peers. Encourage people to get certifications or external trainings. You can help with this by covering costs of external trainings and forming study groups that are a part of normal work activity. Extra Points! How to measure learning culture? Source | Google Cloud DevOps culture | How to implement a learning culture Read More \u00b6 Recommended reading Accelerate Book (Appendix A: Capabilities to Drive Improvement) DORA's State of DevOps research program Google State of DevOps Report 2019 DORA DevOps Quick Check","title":"Tip 2 | Continuous Learning"},{"location":"culture/tip-2-support-learning/#devops-culture","text":"","title":"DevOps Culture"},{"location":"culture/tip-2-support-learning/#tip-2-encourage-and-support-learning","text":"From Accelerate Book (Appendix A: Capabilities to Drive Improvement) Is learning, in your culture, considered essential for continued progress? Is learning thought of as a cost or an investment? This is a measure of an organization\u2019s learning culture. From Google Cloud DevOps culture | Learning culture Research from the DevOps Research and Assessment (DORA) (PDF) team shows that an organizational culture that values learning contributes to software delivery performance with the following: Increased deployment frequency Reduced lead time for changes, time to restore service, and change failure rate Strong team culture The climate for learning in your organization is directly related to the extent to which your organization treats learning as strategic: Does your organization view learning as an investment necessary for growth? Is learning seen as a necessary burden, undertaken only grudgingly? Is learning completely avoided? Research done in other areas, such as accounting, has also shown that a climate for learning is predictive of performance gains.","title":"Tip 2 | Encourage and support learning"},{"location":"culture/tip-2-support-learning/#examples-use-cases","text":"Practices to create a generative culture You can help your organization create a climate for learning by viewing learning as the key to improvement and as an investment. Some steps you can take to directly support learning include: Create a training budget, and advocate for it internally. Emphasize how much the organization values a climate of learning by putting resources behind formal education opportunities. Ensure that your team has the resources to engage in informal learning and the space to explore ideas. Learning often happens outside of formal education. Some companies, like 3M and Google, set aside a portion of time for focused free-thinking and exploration of side projects. Make it safe to fail. If failure is punished, people won't try new things. Treat failures as opportunities to learn, and hold blameless post-mortems to work out how to improve processes and systems. Help people feel comfortable taking reasonable risks, and create a culture of innovation. Create opportunities and spaces to share information. Whether you hold weekly lightning talks or offer resources for monthly lunch-and-learns, set up a regular cadence of opportunities for employees to share their knowledge. Make resources available for continued education. For example, attending conferences is important for both exposure to new technology and case studies, as well as networking with peers. Encourage people to get certifications or external trainings. You can help with this by covering costs of external trainings and forming study groups that are a part of normal work activity. Extra Points! How to measure learning culture? Source | Google Cloud DevOps culture | How to implement a learning culture","title":"Examples &amp; use cases"},{"location":"culture/tip-2-support-learning/#read-more","text":"Recommended reading Accelerate Book (Appendix A: Capabilities to Drive Improvement) DORA's State of DevOps research program Google State of DevOps Report 2019 DORA DevOps Quick Check","title":"Read More"},{"location":"glossary/glossary/","text":"Glossary \u00b6 Summary DevOps: \"is the outcome of applying the most trusted principles from the domain of physical manufacturing and leadership to the IT value stream. DevOps relies on bodies of knowledge from Lean, Theory of Constraints, the Toyota Production System, resilience engineering, learning organizations, safety culture, human factors, and many others. Other valuable contexts that DevOps draws from include high-trust management cultures, servant leadership, and organizational change management. The result is world-class quality, reliability, stability, and security at ever lower cost and effort; and accelerated flow and reliability throughout the technology value stream, including Product Management, Development, QA, IT Operations, and Infosec.\" [ Source: DevOps Handbook ] Lead time: the time it takes to design and validate a product or feature, and the time to deliver the feature to customers. Sometimes defined how long it takes for your team to go from code committed to code successfully running in production. SRE (Site Reliability Engineering): \"SRE is what you get when you treat operations as if it\u2019s a software problem. Our mission is to protect, provide for, and progress the software and systems behind all of Google\u2019s public services \u2014 Google Search, Ads, Gmail, Android, YouTube, and App Engine, to name just a few \u2014 with an ever-watchful eye on their availability, latency, performance, and capacity.\" [ Source: Google ]","title":"Definitions"},{"location":"glossary/glossary/#glossary","text":"Summary DevOps: \"is the outcome of applying the most trusted principles from the domain of physical manufacturing and leadership to the IT value stream. DevOps relies on bodies of knowledge from Lean, Theory of Constraints, the Toyota Production System, resilience engineering, learning organizations, safety culture, human factors, and many others. Other valuable contexts that DevOps draws from include high-trust management cultures, servant leadership, and organizational change management. The result is world-class quality, reliability, stability, and security at ever lower cost and effort; and accelerated flow and reliability throughout the technology value stream, including Product Management, Development, QA, IT Operations, and Infosec.\" [ Source: DevOps Handbook ] Lead time: the time it takes to design and validate a product or feature, and the time to deliver the feature to customers. Sometimes defined how long it takes for your team to go from code committed to code successfully running in production. SRE (Site Reliability Engineering): \"SRE is what you get when you treat operations as if it\u2019s a software problem. Our mission is to protect, provide for, and progress the software and systems behind all of Google\u2019s public services \u2014 Google Search, Ads, Gmail, Android, YouTube, and App Engine, to name just a few \u2014 with an ever-watchful eye on their availability, latency, performance, and capacity.\" [ Source: Google ]","title":"Glossary"},{"location":"lean-management/","text":"Overview \u00b6 TODO","title":"Overview"},{"location":"lean-management/#overview","text":"TODO","title":"Overview"},{"location":"monitoring-and-sre/","text":"Overview \u00b6 TODO","title":"Overview"},{"location":"monitoring-and-sre/#overview","text":"TODO","title":"Overview"},{"location":"product-and-process/","text":"Overview \u00b6 TODO","title":"Overview"},{"location":"product-and-process/#overview","text":"TODO","title":"Overview"},{"location":"security/","text":"Overview \u00b6 TODO","title":"Overview"},{"location":"security/#overview","text":"TODO","title":"Overview"}]}